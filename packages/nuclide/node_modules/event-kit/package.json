{
  "_args": [
    [
      {
        "raw": "event-kit@https://registry.npmjs.org/event-kit/-/event-kit-2.2.0.tgz",
        "scope": null,
        "escapedName": "event-kit",
        "name": "event-kit",
        "rawSpec": "https://registry.npmjs.org/event-kit/-/event-kit-2.2.0.tgz",
        "spec": "https://registry.npmjs.org/event-kit/-/event-kit-2.2.0.tgz",
        "type": "remote"
      },
      "/tmp/apm-install-dir-117110-18544-wyxgzo/node_modules/nuclide"
    ]
  ],
  "_from": "event-kit@2.2.0",
  "_id": "event-kit@2.2.0",
  "_inCache": true,
  "_location": "/nuclide/event-kit",
  "_phantomChildren": {},
  "_requested": {
    "raw": "event-kit@https://registry.npmjs.org/event-kit/-/event-kit-2.2.0.tgz",
    "scope": null,
    "escapedName": "event-kit",
    "name": "event-kit",
    "rawSpec": "https://registry.npmjs.org/event-kit/-/event-kit-2.2.0.tgz",
    "spec": "https://registry.npmjs.org/event-kit/-/event-kit-2.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/nuclide",
    "/nuclide/simple-text-buffer"
  ],
  "_resolved": "https://registry.npmjs.org/event-kit/-/event-kit-2.2.0.tgz",
  "_shasum": "29df50deae3d6d4c1c62451b10925f28641e928b",
  "_shrinkwrap": null,
  "_spec": "event-kit@https://registry.npmjs.org/event-kit/-/event-kit-2.2.0.tgz",
  "_where": "/tmp/apm-install-dir-117110-18544-wyxgzo/node_modules/nuclide",
  "bugs": {
    "url": "https://github.com/atom/event-kit/issues"
  },
  "dependencies": {},
  "description": "Simple library for implementing and consuming evented APIs",
  "devDependencies": {
    "coffee-cache": "^0.2.0",
    "coffee-script": "^1.7.0",
    "grunt": "^0.4.1",
    "grunt-atomdoc": "^1.0.0",
    "grunt-cli": "^0.1.8",
    "grunt-coffeelint": "^0.0.6",
    "grunt-contrib-coffee": "^0.9.0",
    "grunt-shell": "^0.2.2",
    "jasmine-focused": "^1.0.4",
    "rimraf": "^2.2.2",
    "temp": "^0.6.0"
  },
  "homepage": "https://github.com/atom/event-kit#readme",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/atom/event-kit/raw/master/LICENSE.md"
    }
  ],
  "main": "./lib/event-kit",
  "name": "event-kit",
  "optionalDependencies": {},
  "readme": "# event-kit\n[![OS X Build Status](https://travis-ci.org/atom/event-kit.svg?branch=master)](https://travis-ci.org/atom/event-kit) [![Windows Build Status](https://ci.appveyor.com/api/projects/status/lb32q70204lpmlxo/branch/master?svg=true)](https://ci.appveyor.com/project/Atom/event-kit/branch/master) [![Dependency Status](https://david-dm.org/atom/event-kit.svg)](https://david-dm.org/atom/event-kit)\n\nThis is a simple library for implementing event subscription APIs.\n\n## Implementing Event Subscription APIs\n\n```coffee\n{Emitter} = require 'event-kit'\n\nclass User\n  constructor: ->\n     @emitter = new Emitter\n\n  onDidChangeName: (callback) ->\n     @emitter.on 'did-change-name', callback\n\n  setName: (name) ->\n     if name isnt @name\n       @name = name\n       @emitter.emit 'did-change-name', name\n     @name\n\n  destroy: ->\n    @emitter.dispose()\n```\n\nIn the example above, we implement `::onDidChangeName` on the user object, which\nwill register callbacks to be invoked whenever the user's name changes. To do\nso, we make use of an internal `Emitter` instance. We use `::on` to subscribe\nthe given callback in `::onDidChangeName`, and `::emit` in `::setName` to notify\nsubscribers. Finally, when the `User` instance is destroyed we call `::dispose`\non the emitter to unsubscribe all subscribers.\n\n## Consuming Event Subscription APIs\n\n`Emitter::on` returns a `Disposable` instance, which has a `::dispose` method.\nTo unsubscribe, simply call dispose on the returned object.\n\n```coffee\nsubscription = user.onDidChangeName (name) -> console.log(\"My name is #{name}\")\n# Later, to unsubscribe...\nsubscription.dispose()\n```\n\nYou can also use `CompositeDisposable` to combine disposable instances together.\n\n```coffee\n{CompositeDisposable} = require 'event-kit'\n\nsubscriptions = new CompositeDisposable\nsubscriptions.add user1.onDidChangeName (name) -> console.log(\"User 1: #{name}\")\nsubscriptions.add user2.onDidChangeName (name) -> console.log(\"User 2: #{name}\")\n\n# Later, to unsubscribe from *both*...\nsubscriptions.dispose()\n```\n\n## Creating Your Own Disposables\n\nDisposables are convenient ways to represent a resource you will no longer\nneed at some point. You can instantiate a disposable with an action to take when\nno longer needed.\n\n```coffee\n{Disposable} = require 'event-kit'\n\ndisposable = new Disposable => @destroyResource()\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/atom/event-kit.git"
  },
  "scripts": {
    "prepublish": "grunt clean lint coffee shell:update-atomdoc atomdoc",
    "test": "grunt test"
  },
  "version": "2.2.0"
}
