{
  "_args": [
    [
      {
        "raw": "random-seed@https://registry.npmjs.org/random-seed/-/random-seed-0.2.0.tgz",
        "scope": null,
        "escapedName": "random-seed",
        "name": "random-seed",
        "rawSpec": "https://registry.npmjs.org/random-seed/-/random-seed-0.2.0.tgz",
        "spec": "https://registry.npmjs.org/random-seed/-/random-seed-0.2.0.tgz",
        "type": "remote"
      },
      "/tmp/apm-install-dir-117110-18544-wyxgzo/node_modules/nuclide"
    ]
  ],
  "_from": "random-seed@>=0.2.0 <0.3.0",
  "_id": "random-seed@0.2.0",
  "_inCache": true,
  "_location": "/nuclide/random-seed",
  "_phantomChildren": {},
  "_requested": {
    "raw": "random-seed@https://registry.npmjs.org/random-seed/-/random-seed-0.2.0.tgz",
    "scope": null,
    "escapedName": "random-seed",
    "name": "random-seed",
    "rawSpec": "https://registry.npmjs.org/random-seed/-/random-seed-0.2.0.tgz",
    "spec": "https://registry.npmjs.org/random-seed/-/random-seed-0.2.0.tgz",
    "type": "remote"
  },
  "_requiredBy": [
    "/nuclide",
    "/nuclide/atom-patch"
  ],
  "_resolved": "https://registry.npmjs.org/random-seed/-/random-seed-0.2.0.tgz",
  "_shasum": "4d1889b46dc84ef52316ceb7772b0ce0a544f38e",
  "_shrinkwrap": null,
  "_spec": "random-seed@https://registry.npmjs.org/random-seed/-/random-seed-0.2.0.tgz",
  "_where": "/tmp/apm-install-dir-117110-18544-wyxgzo/node_modules/nuclide",
  "author": {
    "name": "skratchdot"
  },
  "bugs": {
    "url": "https://github.com/skratchdot/random-seed/issues"
  },
  "dependencies": {},
  "description": "GRC's UHE PRNG in node (Ultra-High Entropy Pseudo-Random Number Generator by Gibson Research Corporation)",
  "devDependencies": {
    "grunt": "~0.4.5",
    "grunt-contrib-jshint": "~0.10.0",
    "grunt-contrib-nodeunit": "~0.4.0",
    "grunt-contrib-watch": "~0.6.1"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "homepage": "https://github.com/skratchdot/random-seed",
  "keywords": [
    "random",
    "number",
    "generator",
    "uhe",
    "prng"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/skratchdot/random-seed/blob/master/LICENSE-MIT"
    },
    {
      "type": "Public Domain",
      "url": "https://github.com/skratchdot/random-seed/blob/master/LICENSE-GRC"
    }
  ],
  "main": "lib/random-seed",
  "name": "random-seed",
  "optionalDependencies": {},
  "readme": "# random-seed\n\n[![Build Status](https://travis-ci.org/skratchdot/random-seed.png?branch=master)](https://travis-ci.org/skratchdot/random-seed)\n[![Coverage Status](https://coveralls.io/repos/skratchdot/random-seed/badge.png)](https://coveralls.io/r/skratchdot/random-seed)\n[![devDependency Status](https://david-dm.org/skratchdot/random-seed/dev-status.svg)](https://david-dm.org/skratchdot/random-seed#info=devDependencies)\n\nGibson Research Corporation's Ultra-High Entropy Pseudo-Random Number Generator\nported to node.\n\nThe original library / project page is located here: https://www.grc.com/otg/uheprng.htm\n\nThe node project page is here: https://github.com/skratchdot/random-seed\n\nThere were a few modifications made to the original library to allow seeding, and to\npass jshint.\n\nI've also added the following helper methods:\n\n- random()\n- range(range)\n- floatBetween(min, max)\n- intBetween(min, max)\n\n\n## Getting Started\n\nInstall the module with: `npm install random-seed`\n\n```javascript\nvar rand = require('random-seed').create();\nvar n = rand(100); // generate a random number between 0 - 99\n```\n\n\n## Documentation\n\n### Create a random number generator\n\n```javascript\nvar gen = require('random-seed'); // create a generator\n\n// these generators produce different numbers\nvar rand1 = gen.create(); // method 1\nvar rand2 = new gen();    // method 2\nvar rand3 = gen();        // method 3\n\n// these generators will produce\n// the same sequence of numbers\nvar seed = 'My Secret String Value';\nvar rand4 = gen.create(seed);\nvar rand5 = new gen(seed);\nvar rand6 = gen(seed);\n```\n\n### Random Generator Methods\n\nOnce a random generator is created, you have the following methods available.\n\nI typically create a random generator like this:\n\n```javascript\nvar rand = require('random-seed').create();\n```\n\n#### rand(range)\n\nReturns a random integer between 0 (inclusive) and range (exclusive)\n\n#### rand.range(range)\n\nReturns a random integer between 0 (inclusive) and range (exclusive)\n\n#### rand.random()\n\nReturns a random float between 0 (inclusive) and 1 (exclusive)\n\nWorks the same as Math.random()\n\n#### rand.floatBetween(min, max)\n\nReturns a random float between min (inclusive) and max (exclusive)\n\n#### rand.intBetween(min, max)\n\nReturns a random integer between min (inclusive) and max (inclusive)\n\n#### rand.seed(seed)\n\nSame as calling rand.initState() followed by rand.hashString(seed). If seed is not\na string, then the seed value will be converted to a string. If you don't pass a\nseed argument, then the generator uses Math.random() as the seed.\n\n#### rand.string(count)\n\nReturns a pseudo-random string of 'count' printable characters\nranging from chr(33) to chr(126) inclusive.\n\n#### rand.cleanString(inStr)\n\nRemoves leading and trailing spaces and non-printing control characters,\nincluding any embedded carriage-return (CR) and line-feed (LF) characters,\nfrom any string it is handed.  This is also used by the 'hashstring' function (below)\nto help users always obtain the same EFFECTIVE uheprng seeding key.\n\n#### rand.hashString(inStr)\n\nHashes the provided character string after first removing any leading or trailing spaces\nand ignoring any embedded carriage returns (CR) or Line Feeds (LF).\n\n#### rand.addEntropy(/* accept zero or more arguments */)\n\nThis handy exported function is used to add entropy to our uheprng at any time.\n\n#### rand.initState()\n\nIf we want to provide a deterministic startup context for our PRNG,\nbut without directly setting the internal state variables, this allows\nus to initialize the mash hash and PRNG's internal state before providing\nsome hashing input.\n\n#### rand.done()\n\nWe use this (optional) exported function to signal the JavaScript interpreter\nthat we're finished using the internal \"Mash\" hash function so that it can free up the\nlocal \"instance variables\" it will have been maintaining.  It's not strictly\nnecessary, of course, but it's good JavaScript citizenship.\n\n\n## Examples\n\n### Default Usage: create 1 random number between 0 - 99\n```javascript\nvar rand = require('random-seed').create();\nvar n = rand(100); // generate a random number between 0 - 99\n```\n\n### Always create same sequence of random numbers\n```javascript\nvar rand = require('random-seed').create();\nrand.initState();\nvar n1 = rand(100); // n1 === 58\nvar n2 = rand(100); // n2 === 26\nrand.initState();   // re-init\nvar n3 = rand(100); // n3 === 58 && n3 === n1\n```\n\n### Create 2 random number generators\n```javascript\nvar rand1 = require('random-seed').create(),\n\trand2 = require('random-seed').create();\nconsole.log(rand1(100), rand2(100));\n```\n\n### Create 2 random number generators with the same seed\n```javascript\nvar seed = 'Hello World',\n\trand1 = require('random-seed').create(seed),\n\trand2 = require('random-seed').create(seed);\nconsole.log(rand1(100), rand2(100));\n```\n\n### Replace Math.random()\n```javascript\nvar math = require('random-seed').create();\nconsole.log(math.random());\n```\n\n\n## Release History\n\n#### v0.2.0 (Released June 1, 2014)\n\n- Adding the following helper methods:\n  - rand.random(min, max)\n  - rand.floatBetween(min, max)\n  - rand.intBetween(min, max)\n\n#### v0.1.0 (Released October 26, 2013)\n\n- Initial Release\n\n\n## License\n\nCopyright (c) 2013 skratchdot  \n\nDual Licensed under the MIT license and the original Public Domain License by GRC.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/skratchdot/random-seed.git"
  },
  "scripts": {
    "test": "grunt test"
  },
  "version": "0.2.0"
}
